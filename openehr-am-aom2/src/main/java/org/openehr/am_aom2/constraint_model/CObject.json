{
    "attributes": [
        {
            "description": "Reference model type that this node corresponds to.",
            "multiplicity": "1..1",
            "name": "rm_type_name",
            "type": "String"
        },
        {
            "description": "Occurrences of this object node in the data, under the owning attribute. Upper limit can only be greater than 1 if owning attribute has a cardinality of more than 1.",
            "multiplicity": "0..1",
            "name": "occurrences",
            "type": "Multiplicity_interval"
        },
        {
            "description": "Semantic identifier of this node, used to dis-tinguish sibling nodes. All nodes must have a `_node_id_`; for nodes under a container `C_ATTRIBUTE`, the id must be an id-code must be defined in the archetype terminology. For valid structures, all node ids are id-codes.",
            "multiplicity": "1..1",
            "name": "node_id",
            "type": "String"
        },
        {
            "description": "True if this node and by implication all sub-nodes are deprecated for use.",
            "multiplicity": "0..1",
            "name": "is_deprecated",
            "type": "Boolean"
        },
        {
            "description": "Optional indicator of order of this node with respect to another sibling. Only meaningful in a specialised archetype for a `C_OBJECT` within a `C_ATTRIBUTE` with `_is_multiple_ = True`.",
            "multiplicity": "0..1",
            "name": "sibling_order",
            "type": "SIBLING_ORDER"
        }
    ],
    "constants": [],
    "functions": [
        {
            "meaning": "Level of specialisation of this archetype node, based on its `_node_id_`. The value 0 corresponds to non-specialised, 1 to first-level specialisation and so on. The level is the same as the number of \u2018.\u2019 characters in the node_id code. If `_node_id_` is not set, the return value is -1, signifying that the specialisation level should be determined from the nearest parent `C_OBJECT` node having a node_id.",
            "name": "specialisation_depth",
            "parameters": [],
            "return_type": "Integer"
        },
        {
            "meaning": "Compute effective occurrences, where no local occurrences constraint set. If the owning `C_ATTRIBUTE._cardinality_` is set, use its upper value, else use RM multiplicity of the owning attribute.",
            "name": "effective_occurrences",
            "parameters": [],
            "return_type": "Multiplicity_interval"
        },
        {
            "meaning": "True if constraints represented by this node, ignoring any sub-parts, are narrower or the same as other.",
            "name": "c_conforms_to",
            "parameters": [
                {
                    "name": "other",
                    "type": "Object"
                },
                {
                    "name": "rmcc",
                    "type": "Object"
                }
            ],
            "return_type": "Boolean"
        },
        {
            "meaning": "True if constraints represented by this node contain no further redefinitions with respect to the node `_other_`, with the exception of `_node_id_` redefinition in `C_OBJECT` nodes.",
            "name": "c_congruent_to",
            "parameters": [
                {
                    "name": "other",
                    "type": "Object"
                }
            ],
            "return_type": "Boolean"
        },
        {
            "meaning": "True if this node `_occurrences_` conforms to `_other.occurrences_`; `other` is assumed to be in a flat archetype.",
            "name": "occurrences_conforms_to",
            "parameters": [
                {
                    "name": "other",
                    "type": "Object"
                }
            ],
            "return_type": "Boolean"
        },
        {
            "meaning": "True if this node id conforms to `_other.node_id_`, which includes the ids being identical; `_other_` is assumed to be in a flat archetype.",
            "name": "node_id_conforms_to",
            "parameters": [
                {
                    "name": "other",
                    "type": "Object"
                }
            ],
            "return_type": "Boolean"
        },
        {
            "meaning": "True if this `C_OBJECT` node is prohibited, i.e. if its `_occurrences_` is `0..0`.",
            "name": "is_prohibited",
            "parameters": [],
            "return_type": "Boolean"
        }
    ],
    "meta_info": {
        "base_types": [
            "ARCHETYPE_CONSTRAINT"
        ],
        "classifier": "Class",
        "description": "Abstract model of constraint on any kind of object node.",
        "name": "C_OBJECT"
    }
}